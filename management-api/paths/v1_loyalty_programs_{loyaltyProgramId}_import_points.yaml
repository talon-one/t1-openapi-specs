post:
  operationId: importLoyaltyPoints
  summary: Import loyalty points
  description: >
    <div class="redoc-warning small">Management API endpoints are <b>not</b>
    meant to be used in real-time integrations that directly serve your end
    users. Rate limit: 3 requests per second.</div>


    Upload a CSV file containing the loyalty points you want to import into a
    given loyalty program.

    Send the file as multipart data.


    Depending on the type of loyalty program, you can import points into a given
    customer profile or loyalty card.


    The CSV file contains the following columns:


    - `customerprofileid` (optional): For profile-based loyalty programs, the
    integration ID of the customer profile where the loyalty points are
    imported.

      **Note**: If the customer profile does not exist, it will be created. The profile will not be visible in any Application
      until a session or profile update is received for that profile.
    - `identifier` (optional): For card-based loyalty programs, the identifier
    of the loyalty card where the loyalty points are imported.

    - `amount`: The amount of points to award to the customer profile.

    - `startdate` (optional): The earliest date when the points can be redeemed.
    The points are `active` from this date until the expiration date.

      **Note**: It must be an RFC3339 timestamp string or string `immediate`. Empty or missing values are considered `immediate`.
    - `expirydate` (optional): The latest date when the points can be redeemed.
    The points are `expired` after this date.

      **Note**: It must be an RFC3339 timestamp string or string `unlimited`. Empty or missing values are considered `unlimited`.
    - `subledgerid` (optional): The ID of the subledger that should received the
    points.

    - `reason` (optional): The reason why these points are awarded.


    You can use the time zone of your choice. It is converted to UTC internally
    by Talon.One.


    **Note:** For existing customer profiles and loyalty cards, the imported
    points are added to any previous active or pending points, depending on the

    value provided for `startdate`. If `startdate` matches the current date, the
    imported points are _active_. If it is later, the points are _pending_ until

    the date provided for `startdate` is reached.


    **Note:** We recommend limiting your file size to 500MB.


    **Example for profile-based programs:**


    ```text

    customerprofileid,amount,startdate,expirydate,subledgerid,reason

    URNGV8294NV,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement

    ```


    **Example for card-based programs:**


    ```text

    identifier,amount,startdate,expirydate,subledgerid,reason

    summer-loyalty-card-0543,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement

    ```
  tags:
    - Loyalty
  parameters:
    - name: loyaltyProgramId
      in: path
      required: true
      description: >
        Identifier of the loyalty program. You can get the ID with

        the [List loyalty
        programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms)
        endpoint.
      example: 8
      schema:
        type: integer
    - name: notificationsEnabled
      in: query
      description: >
        Indicates whether the points import triggers notifications about its
        effects. For example, a notification is sent if the import upgrades a
        customer's tier or offsets their negative points balance.


        This parameter is optional and defaults to `true`.
      example: true
      required: false
      schema:
        type: boolean
  requestBody:
    required: true
    content:
      multipart/form-data:
        schema:
          type: object
          properties:
            upFile:
              description: The file containing the data that is being imported.
              type: string
              format: csv
  responses:
    '200':
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - type: object
                required:
                  - id
                  - created
                properties:
                  id:
                    type: integer
                    description: The internal ID of this entity.
                    example: 6
                  created:
                    type: string
                    format: date-time
                    description: The time this entity was created.
                    example: '2020-06-10T09:05:27.993483Z'
              - type: object
                required:
                  - accountId
                properties:
                  accountId:
                    type: integer
                    description: The ID of the account that owns this entity.
                    example: 3886
              - type: object
                required:
                  - userId
                properties:
                  userId:
                    type: integer
                    description: The ID of the user associated with this entity.
                    example: 388
              - type: object
                required:
                  - amount
                  - entity
                properties:
                  entity:
                    type: string
                    example: AttributeAllowedList
                    description: |
                      The name of the entity that was imported.
                  amount:
                    type: integer
                    minimum: 0
                    example: 10
                    description: The number of values that were imported.
